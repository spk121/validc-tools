CTEST MANUAL
============

NAME
    ctest - Lightweight C23 unit testing framework

SYNOPSIS
    #include "ctest.h"

    CTEST_TEST(name) {
        /* Test code */
    }

    int main(void) {
        ctest_run_all();
        return 0;
    }

DESCRIPTION
    'ctest' is a minimal unit testing framework for C23, designed for testing
    portable C libraries like 'c23lib' without external dependencies. It provides
    assertion macros, automatic test registration, optional setup/teardown hooks,
    and a simple runner. Tests are written as functions, registered at compile
    time, and executed sequentially with pass/fail reporting.

FEATURES
    - Pure C23, using only <stdio.h>, <stdlib.h>, <stdbool.h>, <string.h>.
    - Assertion macros for common checks (equality, nullness, strings).
    - Automatic test registration via CTEST_TEST macro.
    - Optional per-test setup and teardown functions.
    - Basic reporting of test results.

MACROS
    CTEST_TEST(name)
        Define a test function named 'name'. Automatically registers the test
        to run with 'ctest_run_all'. Optionally define 'name_setup' and
        'name_teardown' functions for initialization and cleanup.

        Example:
            CTEST_TEST(test_add) {
                CTEST_ASSERT_EQ(1 + 1, 2, "Addition should work");
            }
            static void test_add_setup(CTest *ctest) {
                ctest->user_data = malloc(4);
            }
            static void test_add_teardown(CTest *ctest) {
                free(ctest->user_data);
            }

    CTEST_ASSERT(test, msg)
        Assert that 'test' is true. If false, prints file, line, test name,
        and 'msg', marks the test as failed, and returns from the test.

    CTEST_ASSERT_EQ(a, b, msg)
        Assert that 'a' equals 'b'.

    CTEST_ASSERT_NE(a, b, msg)
        Assert that 'a' does not equal 'b'.

    CTEST_ASSERT_TRUE(cond, msg)
        Assert that 'cond' is true.

    CTEST_ASSERT_FALSE(cond, msg)
        Assert that 'cond' is false.

    CTEST_ASSERT_NULL(ptr, msg)
        Assert that 'ptr' is NULL.

    CTEST_ASSERT_NOT_NULL(ptr, msg)
        Assert that 'ptr' is not NULL.

    CTEST_ASSERT_STR_EQ(s1, s2, msg)
        Assert that strings 's1' and 's2' are equal (strcmp == 0).

FUNCTIONS
    void ctest_run_all(void)
        Run all registered tests. Prints the number of tests run, failures,
        and a summary. For each test:
        - Runs setup (if defined).
        - Executes the test function.
        - Runs teardown (if defined).
        - Reports PASS or FAIL with details on failure.

    void ctest_register(CTestEntry *entry)
        Internal function to register a test. Called automatically by
        CTEST_TEST via constructor attribute. Manual use is rare.

STRUCTURES
    CTest
        Context passed to test functions:
        - int tests_run: Total tests executed so far.
        - int tests_failed: Total failures so far.
        - const char *current_test: Name of the current test.
        - void *user_data: User-defined data for setup/teardown.

    CTestEntry
        Internal structure for test registration:
        - const char *name: Test name.
        - CTestFunc func: Test function.
        - CTestSetupFunc setup: Optional setup function.
        - CTestSetupFunc teardown: Optional teardown function.

EXAMPLES
    Basic test file (test_sample.c):
        #include "ctest.h"

        CTEST_TEST(test_math) {
            CTEST_ASSERT_EQ(2 + 2, 4, "Basic addition");
            CTEST_ASSERT_NE(2, 3, "Inequality");
        }

        CTEST_TEST(test_string) {
            char *s = "hello";
            CTEST_ASSERT_STR_EQ(s, "hello", "String equality");
            CTEST_ASSERT_NOT_NULL(s, "String not null");
        }

        int main(void) {
            ctest_run_all();
            return 0;
        }

    With setup/teardown:
        CTEST_TEST(test_memory) {
            CTEST_ASSERT_NOT_NULL(ctest->user_data, "Setup allocated");
            CTEST_ASSERT_STR_EQ(ctest->user_data, "test", "Setup data correct");
        }
        static void test_memory_setup(CTest *ctest) {
            ctest->user_data = malloc(5);
            strcpy(ctest->user_data, "test");
        }
        static void test_memory_teardown(CTest *ctest) {
            free(ctest->user_data);
        }

    Compile and run:
        $ gcc -std=c23 -o test_sample test_sample.c ctest.c
        $ ./test_sample
        Running 2 tests...
        PASS: test_math
        PASS: test_string

        Tests run: 2, Failed: 0
        All tests passed!

EXIT STATUS
    The framework itself does not enforce an exit status, but the test program
    can return:
    0   All tests passed
    Non-zero  One or more tests failed (caller-defined)

LIMITATIONS
    - Maximum 1024 tests (adjustable in ctest.c).
    - No test skipping or verbose mode yet.
    - No test suites for grouping.
    - Relies on __attribute__((constructor)) (GCC/Clang-specific; portable
      alternatives require manual registration or build tool support).
    - No timeout or signal handling (C23 limitation).

NOTES
    - Tests exit early on first assertion failure to ensure isolation.
    - Setup/teardown are optional; define only when needed.
    - Designed for 'level2' of a C23 toolkit, testing 'c23lib' replacements.

AUTHOR
    Generated by Grok 3, built by xAI
    Date: April 08, 2025
    